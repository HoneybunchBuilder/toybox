#include "common.hlsli"

RaytracingAccelerationStructure rs : register(t1, space0);
RWTexture2D<float4> image : register(u2, space0);

struct CameraProperties
{
    float4x4 view_inv;
    float4x4 proj_inv;
};
ConstantBuffer<CameraProperties> camera : register(b3, space0);

struct Payload
{
    float3 hit_value;
};

struct Attribute
{
    float2 attribs;
};

[shader("raygeneration")]
void raygen()
{
    uint3 launch_id = DispatchRaysIndex();
    uint3 launch_size = DispatchRaysDimensions();

    const float2 pixel_center = float2(launch_id.xy) + float2(0.5, 0.5);
    const float2 in_uv = pixel_center/float2(launch_size.xy);
    float2 d = in_uv * 2.0 - 1.0;
    float4 target = mul(camera.proj_inv, float4(d.x, d.y, 1, 1));

    RayDesc rayDesc;
    rayDesc.Origin = mul(camera.view_inv, float4(0,0,0,1)).xyz;
    rayDesc.Direction = mul(camera.view_inv, float4(normalize(target.xyz), 0)).xyz;
    rayDesc.TMin = 0.001;
    rayDesc.TMax = 10000.0;

    Payload payload;
    TraceRay(rs, RAY_FLAG_FORCE_OPAQUE, 0xff, 0, 0, 0, rayDesc, payload);

    image[int2(launch_id.xy)] = float4(payload.hit_value, 0.0);
}

[shader("miss")]
void miss(inout Payload p)
{
    p.hit_value = float3(0.0, 0.0, 0.2);
}

[shader("closesthit")]
void closehit(inout Payload p, in float3 attribs)
{
    p.hit_value = float3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);
}
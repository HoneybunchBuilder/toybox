#pragma once

#include "tb_simd.h"

// Per view matrix look up table
// So that each view is pointing at the right face of the cubemap
// Generated manually by doing the math on the CPU and writing the values here
/*
#define DIR_COUNT 6
  const float3 directions[DIR_COUNT] = {
      {0, 0, -1},
      {0, 0, 1},
      {0, 1, 0},
      {0, -1, 0},
      {-1, 0, 0},
      {1, 0, 0},
  };
  const float3 ups[DIR_COUNT] = {
      {0, 1, 0},
      {0, 1, 0},
      {1, 0, 0},
      {-1, 0, 0},
      {0, 1, 0},
      {0, 1, 0},
  };
  float4x4 matrices[DIR_COUNT] = {};
  for (uint32_t dir_idx = 0; dir_idx < DIR_COUNT; ++dir_idx)
  {
    float4x4 proj = perspective(TB_PI_2, 1.0, 0.001, 1.0f);
    float4x4 view = look_forward((float3){0}, directions[dir_idx],
ups[dir_idx]); matrices[dir_idx] = mulmf44(proj, view);

  }
  // Examine matrices with a print or debugger;
  // e.g. print(transpose_mf44(matrices[dir_idx]))
  // Note that the transpose is only for display purposes when writing into
HLSL.
  // If you were to want to use these matrices at runtime you do not need
  // to transpose
#undef DIR_COUNT

    Note that HLSL defaults matrices like this to being row major
    but the above code is column major. So we manually transpose the output
    of the above code when recording it here
*/
static const column_major float4x4 view_proj_lut[6] = {
  // X+
  { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1.001001, -0.00100100099, 0, 0, -1, 0 },
  // X-
  { -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1.001001, -0.00100100099, 0, 0, 1, 0 },
  // Y+
  { 0, 0, -1, 0, 1, 0, 0, 0, 0, 1.001001, 0, -0.00100100099, 0, 1, 0, 0 },
  // Y-
  { 0, 0, -1, 0, -1, 0, 0, 0, 0, -1.001001, 0, -0.00100100099, 0, -1, 0, 0 },
  // Z+
  { 0, 0, -1, 0, 0, 1, 0, 0, -1.001001, 0, 0, -0.00100100099, -1, 0, 0, 0 },
  // Z-
  { 0, 0, 1, 0, 0, 1, 0, 0, 1.00010001, 0, 0, -0.00100100099, 1, 0, 0, 0 },
};

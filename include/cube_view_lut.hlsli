#pragma once

#include "simd.h"

// Per view matrix look up table
// So that each view is pointing at the right face of the cubemap
// Generated manually by doing the math on the CPU and writing the values here
/*
    float4x4 proj = perspective(PI_2, 1.0, 0.1, 1000.0f);
    float4x4 view = look_forward((float3){0}, (float3){0, -1, 0}, (float3){1, 0, 0});
    float4x4 vp = mulmf44(proj, view);

    Note that because this is HLSL the default matrix layout is row-major but 
    in the rest of toybox is column-major (and that's what the above code produces)
    it's far easier to just copy the vp matrices by visual ordering and set the 
    `column_major` attribute.
*/
static const column_major float4x4 view_proj_lut[6] = {
    // X+
    {0.00000000, 0.00000000, 1.00010002, 1.00000000,
     0.00000000, 1.00000000, 0.00000000, 0.00000000,
     -1.00000000, 0.00000000, 0.00000000,  0.00000000,
     0.00000000, 0.00000000, -0.100010000, 0.00000000},
    // X-
    {0.00000000, 0.00000000, -1.00010002, -1.00000000,
     0.00000000, 1.00000000, 0.00000000, 0.00000000,
     1.00000000, 0.00000000, 0.00000000,  0.00000000,
     0.00000000, 0.00000000, -0.100010000, 0.00000000},
     // Y+
     {0.00000000, 1.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, 1.00010002, 1.00000000,
     1.00000000, 0.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, -0.100010000, 0.00000000,},
     // Y-
     {0.00000000, 1.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, -1.00010002, -1.00000000,
     -1.00000000, 0.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, -0.100010000, 0.00000000,},
     // Z+
     {1.00000000, 0.00000000, 0.00000000, 0.00000000,
     0.00000000, 1.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, 1.00010002, 1.00000000,
     0.00000000, 0.00000000, -0.100010000, 0.00000000},
     // Z-
     {-1.00000000, 0.00000000, 0.00000000, 0.00000000,
     0.00000000, 1.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, -1.00010002, -1.00000000,
     0.00000000, 0.00000000, -0.100010000, 0.00000000},
};

diff --git a/client/TracyProfiler.cpp b/client/TracyProfiler.cpp
index b4973791..6948ae23 100644
--- a/client/TracyProfiler.cpp
+++ b/client/TracyProfiler.cpp
@@ -50,6 +50,10 @@
 #  include <vector>
 #endif
 
+#ifdef __SWITCH__
+#include <unistd.h>
+#endif
+
 #include <algorithm>
 #include <assert.h>
 #include <atomic>
diff --git a/TracyVulkan.hpp b/TracyVulkan.hpp
index d19cbdee..0c0255a8 100644
--- a/TracyVulkan.hpp
+++ b/TracyVulkan.hpp
@@ -374,6 +374,7 @@ public:
         const auto queryId = ctx->NextQueryId();
         vkCmdWriteTimestamp( cmdbuf, VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, ctx->m_query, queryId );
 
+        #ifdef TRACY_HAS_CALLSTACK
         auto item = Profiler::QueueSerialCallstack( Callstack( depth ) );
         MemWrite( &item->hdr.type, QueueType::GpuZoneBeginCallstackSerial );
         MemWrite( &item->gpuZoneBegin.cpuTime, Profiler::GetTime() );
@@ -382,6 +383,7 @@ public:
         MemWrite( &item->gpuZoneBegin.queryId, uint16_t( queryId ) );
         MemWrite( &item->gpuZoneBegin.context, ctx->GetId() );
         Profiler::QueueSerialFinish();
+        #endif
     }
 
     tracy_force_inline VkCtxScope( VkCtx* ctx, uint32_t line, const char* source, size_t sourceSz, const char* function, size_t functionSz, const char* name, size_t nameSz, VkCommandBuffer cmdbuf, bool is_active )
@@ -423,6 +425,7 @@ public:
         const auto queryId = ctx->NextQueryId();
         vkCmdWriteTimestamp( cmdbuf, VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, ctx->m_query, queryId );
 
+        #ifdef TRACY_HAS_CALLSTACK
         const auto srcloc = Profiler::AllocSourceLocation( line, source, sourceSz, function, functionSz, name, nameSz );
         auto item = Profiler::QueueSerialCallstack( Callstack( depth ) );
         MemWrite( &item->hdr.type, QueueType::GpuZoneBeginAllocSrcLocCallstackSerial );
@@ -432,6 +435,7 @@ public:
         MemWrite( &item->gpuZoneBegin.queryId, uint16_t( queryId ) );
         MemWrite( &item->gpuZoneBegin.context, ctx->GetId() );
         Profiler::QueueSerialFinish();
+        #endif
     }
 
     tracy_force_inline ~VkCtxScope()
diff --git a/client/TracyProfiler.cpp b/client/TracyProfiler.cpp
index b4973791..deafca1f 100644
--- a/client/TracyProfiler.cpp
+++ b/client/TracyProfiler.cpp
@@ -116,6 +116,11 @@ extern "C" typedef BOOL (WINAPI *t_GetLogicalProcessorInformationEx)( LOGICAL_PR
 #  include <mutex>
 #endif
 
+#if __SWITCH__
+#define _POSIX_HOST_NAME_MAX 260
+#define _POSIX_LOGIN_NAME_MAX 260
+#endif
+
 namespace tracy
 {
 
@@ -398,6 +407,8 @@ static const char* GetHostInfo()
     {
         memcpy( user, "(?)", 4 );
     }
+# elif defined __SWITCH__
+    // do nothing
 #  else
     getlogin_r( user, _POSIX_LOGIN_NAME_MAX );
 #  endif
diff --git a/client/tracy_rpmalloc.cpp b/client/tracy_rpmalloc.cpp
index c2628d79..8c6747af 100644
--- a/client/tracy_rpmalloc.cpp
+++ b/client/tracy_rpmalloc.cpp
@@ -1698,14 +1698,18 @@ rp_thread_destructor(void* value) {
 #endif
 
 #if PLATFORM_POSIX
-#  include <sys/mman.h>
-#  include <sched.h>
-#  ifdef __FreeBSD__
-#    include <sys/sysctl.h>
-#    define MAP_HUGETLB MAP_ALIGNED_SUPER
-#  endif
-#  ifndef MAP_UNINITIALIZED
-#    define MAP_UNINITIALIZED 0
+#  if __SWITCH__
+#    include <malloc.h>
+#  else
+#    include <sys/mman.h>
+#    include <sched.h>
+#    ifdef __FreeBSD__
+#      include <sys/sysctl.h>
+#      define MAP_HUGETLB MAP_ALIGNED_SUPER
+#    endif
+#    ifndef MAP_UNINITIALIZED
+#      define MAP_UNINITIALIZED 0
+#    endif
 #  endif
 #endif
 #include <errno.h>
@@ -1776,8 +1780,13 @@ rpmalloc_initialize_config(const rpmalloc_config_t* config) {
 				CloseHandle(token);
 			}
 		}
+#else
+#if defined (__SWITCH__)
+		// devkitPro declares sysconf but doesn't implement it
+		_memory_page_size = 0x10000; // 64KiB
 #else
 		_memory_page_size = (size_t)sysconf(_SC_PAGESIZE);
+#endif
 		_memory_map_granularity = _memory_page_size;
 		if (config && config->enable_huge_pages) {
 #if defined(__linux__)
@@ -2048,6 +2052,8 @@ _memory_map_os(size_t size, size_t* offset) {
 		assert(!"Failed to map virtual memory block");
 		return 0;
 	}
+#elif __SWITCH__
+	void* ptr = malloc(size + padding);
 #else
 	int flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_UNINITIALIZED;
 #  if defined(__APPLE__)
@@ -2101,9 +2107,13 @@ _memory_unmap_os(void* address, size_t size, size_t offset, size_t release) {
 	}
 #else
 	if (release) {
-		if (munmap(address, release)) {
-			assert("Failed to unmap virtual memory block" == 0);
-		}
+		#if __SWITCH__
+			free(address);
+		#else
+			if (munmap(address, release)) {
+				assert("Failed to unmap virtual memory block" == 0);
+			}
+		#endif
 	}
 	else {
 #if defined(POSIX_MADV_FREE)

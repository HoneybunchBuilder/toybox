#include "tb_common.slangh"

[[vk::binding(0, 0)]]
Texture2D input;
[[vk::binding(1, 0)]]
RWTexture2D<float4> output;
[[vk::binding(2, 0)]]
SamplerState s;

[numthreads(16, 16, 1)]
[shader("compute")]
void comp(int3 group_thread_id: SV_GroupThreadID,
          int3 dispatch_thread_id: SV_DispatchThreadID) {
  float2 in_res;
  input.GetDimensions(in_res.x, in_res.y);

  float2 out_res;
  output.GetDimensions(out_res.x, out_res.y);

  float2 uv = float2(dispatch_thread_id.xy) / out_res;
  float2 texel_size = 1 / in_res;
  float x = texel_size.x;
  float y = texel_size.y;
  uv += texel_size / 2.0f;

  // Downsample with box filter
  float4 a = input.SampleLevel(s, uv + float2(-2 * x, 2 * y), 0);
  float4 b = input.SampleLevel(s, uv + float2(0, 2 * y), 0);
  float4 c = input.SampleLevel(s, uv + float2(2 * x, 2 * y), 0);

  float4 d = input.SampleLevel(s, uv + float2(-2 * x, 0), 0);
  float4 e = input.SampleLevel(s, uv + float2(0, 0), 0);
  float4 f = input.SampleLevel(s, uv + float2(2 * x, 0), 0);

  float4 g = input.SampleLevel(s, uv + float2(-2 * x, -2 * y), 0);
  float4 h = input.SampleLevel(s, uv + float2(0, -2 * y), 0);
  float4 i = input.SampleLevel(s, uv + float2(2 * x, -2 * y), 0);

  float4 j = input.SampleLevel(s, uv + float2(-x, y), 0);
  float4 k = input.SampleLevel(s, uv + float2(x, y), 0);
  float4 l = input.SampleLevel(s, uv + float2(-x, -y), 0);
  float4 m = input.SampleLevel(s, uv + float2(x, -y), 0);

  float4 downsample = e * 0.125;
  downsample += (a + c + g + i) * 0.03125;
  downsample += (b + d + f + h) * 0.0625;
  downsample += (j + k + l + m) * 0.125;

  output[dispatch_thread_id.xy] = downsample;
}
